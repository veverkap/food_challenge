#!/usr/bin/env ruby
#coding:utf-8
require "rubygems"
require "bundler/setup"
require "down"
require "aws-sdk-s3"
require "streamio-ffmpeg"
require "logger"

Aws.config.update(
  endpoint: ENV["MINIO_ENDPOINT"],
  access_key_id: ENV["MINIO_ACCESS_KEY_ID"],
  secret_access_key: ENV["MINIO_SECRET_ACCESS_KEY"],
  force_path_style: true,
  region: 'us-east-1'
)


LOGGER = Logger.new(STDOUT)

class Downloader
  attr_reader :frame_url, :playlist_url, :base_url

  def minio_client
    @minio_client ||= Aws::S3::Client.new
  end

  def initialize(frame_url = "https://v.angelcam.com/iframe?v=9klzdgn2y4")
    @frame_url = frame_url
  end

  def process
    segments = load_ts_segments()
    LOGGER.info " - segments = #{segments}"
    segments.each do |segment_file|
      destination = download_video(segment_file)
      upload_to_minio(destination)

      screenshot = snapshot_video(destination, segment_file)
      process_screenshot(screenshot)
      upload_to_minio(screenshot)

      File.delete(destination)
      File.delete(screenshot)
    end
  end

  def load_ts_segments
    html = read_url(frame_url)
    @playlist_url = html.match(/(https?:\/\/.*\.m3u8\?token=.*)'/).captures.first
    @base_url = playlist_url.gsub(playlist_url.split("/")[-1], "")
    item = read_url(playlist_url)
    item.scan(/segment-\d*\.ts/)
  end

  def download_video(filename)
    source = base_url + filename
    LOGGER.info " - source = #{source}"
    destination = "../videos/#{filename}"
    LOGGER.info " - destination = #{destination}"
    download_url(source, destination) unless File.exist?(destination)
    destination
  end

  def snapshot_video(destination, segment_file)
    screenshot = "../images/#{segment_file.gsub(".ts", ".jpg")}"
    LOGGER.info " - snapshot_video: #{screenshot}"
    movie = FFMPEG::Movie.new(destination)
    movie.screenshot(screenshot)
    screenshot
  end

  def upload_to_minio(destination)
    filename = destination.split("/").last
    content_type = "video/MP2T"
    folder = "video"

    if File.extname(destination) == ".jpg"
      content_type = "image/jpeg"
      folder = "images"
    end

    contents = File.read(destination)
    key = "#{Time.now.strftime("%F")}/#{folder}/#{filename}"

    LOGGER.info " - uploading #{destination} to #{key} with content_type #{content_type}"

    minio_client.put_object(
      key: key,
      body: contents,
      bucket: "meatsweats",
      content_type: content_type
    )
  end

  def process_screenshot(screenshot)
  end

  def download_url(source, destination)
    LOGGER.info " - download_url: #{source} to #{destination}"
    Down.download(source, destination: destination)
  end

  def read_url(source)
    LOGGER.info "- read_url: #{source}"
    Down.download(source).read
  end
end
downloader = Downloader.new
# while true
downloader.process()
#   LOGGER.info "sleeping for 10"
#   sleep 10
# end
